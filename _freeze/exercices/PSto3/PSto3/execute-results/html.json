{
  "hash": "9bca0653b885432f636d555ceb67a85c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"12 - Processus stochastique (3/3)\"\nauthor: \"Jérôme Soucy\"\n---\n\n\n\n\n## Indication\nPour certaines questions, vous êtes encouragés à utiliser un outil informatique pour faire les calculs.\n\n---\n\n### Question 1\nLa matrice suivante est la matrice de transition d'une chaîne de Markov associée à un mini-web :\n\n$$\n\\begin{pmatrix}\n0 & \\frac{1}{2} & 0 & \\frac{1}{2} \\\\\n\\frac{1}{3} & 0 & 0 & 0 \\\\\n\\frac{1}{3} & \\frac{1}{2} & \\frac{1}{2} & \\frac{1}{2} \\\\\n\\frac{1}{3} & 0 & \\frac{1}{2} & 0\n\\end{pmatrix}\n$$\n\nDonnez une représentation schématique du mini-web.\n\n\n\n---\n\n### Question 2\nConsidérez le mini-web suivant :\n\n![3 pages](3pages.png)\n\n#### Questions :\n1. Sans faire de calculs, déterminez le **PageRank** du mini-web.\n2. Pouvez-vous ajouter d'autres liens tout en conservant le même PageRank ?\n\n**Solution :**\n\n1. Puisqu'un promeneur se déplace en suivant les liens et passe autant de temps sur chaque page, le **PageRank** est :  \n   $$\n   1 \\cong 2 \\cong 3\n   $$\n\n2. On peut ajouter des liens de manière symétrique pour conserver le même PageRank. Par exemple :\n\n\n\n\n```{mermaid}\ngraph LR\n  1 <--> 2\n  2 <--> 3\n  3 <--> 1\n```\n\n\n\n\n---\n\n### Question 3\nSoit $\\mathcal{W}$ le mini-web suivant :\n\n![5 pages](5pages.png)\n\n#### Questions :\n1. Si un promeneur débute à la page 5, quel sera son **PageRank** ?\n2. Que se passe-t-il s'il débute à la page 2 ?\n3. Déterminez la matrice de transition de $\\mathcal{W}$.\n4. Trouvez un vecteur $\\vec{v}$ tel que $M\\vec{v} = \\vec{v}$.\n5. Trouvez le polynôme caractéristique de $M$.\n6. Trouvez les valeurs propres de $M$.\n7. Modifiez la matrice pour tenir compte des pages sans liens sortants. Appelez cette matrice $N$.\n8. Calculez la matrice Google $G$ avec une probabilité de téléportation $\\frac{1}{10}$.\n9. Utilisez $G$ pour déterminer le **PageRank**.\n\n#### Exemple de calcul en Python pour la matrice de transition :\n\n::: {#ebe5efe5 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\n# Matrice de transition\nA = np.array([\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 1/3, 0],\n    [1, 0, 0, 1/3, 1],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 1/3, 0]\n])\n\n# Exemple de calcul de vecteur propre\neigenvalues, eigenvectors = np.linalg.eig(A.T)\nprint(\"Valeurs propres :\", eigenvalues)\nprint(\"Vecteurs propres :\", eigenvectors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValeurs propres : [ 0.  0.  1. -1.  0.]\nVecteurs propres : [[ 0.00000000e+000  0.00000000e+000  5.38815906e-001  5.77350269e-001\n   0.00000000e+000]\n [ 0.00000000e+000  0.00000000e+000  0.00000000e+000  0.00000000e+000\n   1.50312627e-291]\n [ 0.00000000e+000  0.00000000e+000  5.38815906e-001 -5.77350269e-001\n   0.00000000e+000]\n [ 1.00000000e+000 -1.00000000e+000  3.59210604e-001  3.12901517e-018\n  -1.00000000e+000]\n [ 0.00000000e+000  1.50312627e-291  5.38815906e-001  5.77350269e-001\n   0.00000000e+000]]\n```\n:::\n:::\n\n\n## Question 4\nConsidérez le mini-web $\\mathcal{W}$ ci-dessous.\n![7 pages](7pages.png)\n\n1. Trouvez la matrice de transition de $\\mathcal{W}$.\n2. Trouvez la matrice de transition de $\\mathcal{W}$ qui permet la téléportation avec probabilité 0.15.\n3. À l'aide d'un outil informatique, trouvez le PageRank de $\\mathcal{W}$ (en utilisant la matrice trouvée en 2).\n\n### Question 5\nConsidérez un mini-web $\\mathcal{W}$ avec $N$ pages, où $N \\geq 2$. Les vecteurs $\\vec{e}$ et $\\vec{E}$ sont définis par :\n\n$$\n\\vec{e} = \\begin{pmatrix}\n1 \\\\\n1 \\\\\n\\vdots \\\\\n1\n\\end{pmatrix}, \\quad\n\\vec{E} = \\begin{pmatrix}\nE_1 \\\\\nE_2 \\\\\n\\vdots \\\\\nE_N\n\\end{pmatrix}, \\quad\nE_i = \\begin{cases}\n1 & \\text{si la page } i \\text{ n'a pas de liens sortants}, \\\\\n0 & \\text{sinon.}\n\\end{cases}\n$$\n1. À quoi correspond $\\frac{1}{N}\\vec{e}\\vec{E}^T$ ?\n2. Si $A$ est la matrice de transition, exprimez $B$ pour tenir compte des pages sans liens sortants.\n3. Montrez que la matrice Google $G$, avec une probabilité $\\beta$, peut s'exprimer :\n   $$\n   G = \\beta A + \\frac{1}{N} \\vec{e} (\\beta \\vec{E}^T + (1 - \\beta)\\vec{e}^T).\n   $$\n4. Pourquoi $A$ est une matrice creuse ? Pourquoi $G$ est une matrice où tous les éléments sont dans $[0, 1]$ ?\n\n",
    "supporting": [
      "PSto3_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}